<launch>

  <!-- arguments -->
  <arg name="vid1" />
  <arg name="vid2" />
  <arg name="vid3" />
  <arg name="path_fisheye1" />
  <arg name="path_fisheye2" />
  <arg name="path_kinect" />
  <arg name="res_fisheye1" value="/media/Hitachi/ScienceParkNewData/fisheye1/res" />
  <arg name="res_fisheye2" value="/media/Hitachi/ScienceParkNewData/fisheye2/res" />
  <arg name="res_kinect" value="/media/Hitachi/ScienceParkNewData/kinect/res" />
  <arg name="rate_factor" value="0.4"/>
  <arg name="frame_ids" value="/head_1 /neck_1 /torso_1 /left_shoulder_1 /left_elbow_1 /left_hand_1 /right_shoulder_1 /right_elbow_1 /right_hand_1 /left_hip_1 /left_knee_1 /left_foot_1 /right_hip_1 /right_knee_1 /right_foot_1"/>
  <arg name="compensate_fisheye1"/>
  <arg name="compensate_fisheye2"/>


  <!-- time machien -->
  <param name="/use_sim_time" value="True" />

  <!-- play videos -->
  <node pkg="rosbag" type="play" name="play_video" required="true"
        args="-r $(arg rate_factor) --clock $(arg vid1) $(arg vid2) $(arg vid3)" />


  <!-- tf of kinect -->
  <node pkg="tf" type="static_transform_publisher" name="openni_tracker_tf"
        args="0 0 0 0 0 0 /camera_depth_frame /openni_depth_frame 100"/>

  <!-- tf of kinect and world-->
  <node pkg="accompany_static_camera_localisation" type="publish_tf_from_extrinsic" name="kinect_tf"
        args="-p camera_rgb_optical_frame -c world -e $(arg res_kinect)/camera_extrinsic.xml -r"/>

  <!-- tf of world and fisheye -->
  <node pkg="accompany_static_camera_localisation" type="publish_tf_from_extrinsic" name="fisheye1_tf"
        args="-p world -c fisheye1_optical_frame -e $(arg res_fisheye1)/camera_extrinsic.xml"/>
  <node pkg="accompany_static_camera_localisation" type="publish_tf_from_extrinsic" name="fisheye2_tf"
        args="-p world -c fisheye2_optical_frame -e $(arg res_fisheye2)/camera_extrinsic.xml"/>


  <!-- decode fisheye1 -->
  <node pkg="image_transport" type="republish" name="republishfisheye1"
        args="compressed in:=/fisheye1/gscam/image_raw raw out:=/fisheye1/gscam/image_raw" />
  <node pkg="image_proc" type="image_proc" name="imgprocfisheye1"
        ns="/fisheye1/gscam" /> <!--create undistorted image-->

  <!-- decode fisheye2 -->
  <node pkg="image_transport" type="republish" name="republishfisheye2"
        args="compressed in:=/fisheye2/gscam/image_raw raw out:=/fisheye2/gscam/image_raw" />
  <node pkg="image_proc" type="image_proc" name="imgprocfisheye2"
        ns="/fisheye2/gscam" /> <!--create undistorted image-->

  <!-- save skeletons to xml -->
  <node pkg="accompany_static_camera_localisation" type="project_tf_to_camera" name="save_skeleton_fisheye1"
        args="-f $(arg frame_ids) -t /fisheye1/gscam/image_color -c $(arg compensate_fisheye1) -s $(arg path_fisheye1)/skeletons.yaml" />
  <node pkg="accompany_static_camera_localisation" type="project_tf_to_camera" name="save_skeleton_fisheye2"
        args="-f $(arg frame_ids) -t /fisheye2/gscam/image_color -c $(arg compensate_fisheye2) -s $(arg path_fisheye2)/skeletons.yaml" />

  <!-- decode kinect -->
  <!-- <node pkg="image_transport" type="republish" name="republishkinect" -->
  <!--       args="compressed in:=/camera/rgb/image_raw raw out:=/camera/rgb/image_raw" /> -->

  <!-- save video to frames -->
  <!-- <include file="/home/ninghang/workspace/pose_estimation/scripts/convertFrames.launch"> -->
  <!--    <arg name="path_fisheye1" value="$(arg path_fisheye1)" /> -->
  <!--    <arg name="path_fisheye2" value="$(arg path_fisheye2)" /> -->
  <!--    <arg name="path_kinect" value="$(arg path_kinect)" /> -->
  <!-- </include> -->

  <!-- decode and view camera2 (kinect) -->
  <!-- <include file="$(find openni_launch)/launch/openni.launch"> -->
  <!--   <arg name="load_driver" value="false" /> -->
  <!-- </include> -->

</launch>